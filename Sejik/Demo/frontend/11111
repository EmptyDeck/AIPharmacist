import React, { useState, useEffect, useRef } from 'react';
import { Send, AlertCircle, Pill, FileText, User, Heart, Activity, ChevronDown, Star, ThumbsUp, ThumbsDown } from 'lucide-react';

const MedicalChatbot = () => {
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [medicalDocument, setMedicalDocument] = useState('');
  const [selectedConditions, setSelectedConditions] = useState([]);
  const [selectedMedications, setSelectedMedications] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [showDocumentInput, setShowDocumentInput] = useState(false);
  const [showFeedback, setShowFeedback] = useState({});
  const messagesEndRef = useRef(null);

  // 일반적인 기저질환 목록
  const commonConditions = [
    '당뇨병', '고혈압', '심장질환', '천식', '관절염', 
    '갑상선질환', '고지혈증', '우울증', '불안장애', '만성폐쇄성폐질환'
  ];

  // 일반적인 약물 목록
  const commonMedications = [
    '아스피린', '타이레놀', '부루펜', '메트포르민', '암로디핀',
    '아토르바스타틴', '오메프라졸', '레보티록신', '리시노프릴', '메트프롤롤'
  ];

  useEffect(() => {
    // 초기 환영 메시지
    setMessages([{
      id: 'welcome',
      type: 'bot',
      content: '안녕하세요! 의료 정보 도우미입니다. 😊\n\n의사 소견서나 처방전에 대해 궁금한 점이 있으시면 편하게 물어보세요. 더 정확한 답변을 위해 기저질환이나 복용 중인 약물을 선택해주시면 좋습니다.',
      timestamp: new Date()
    }]);
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim() && !medicalDocument.trim()) return;

    const userMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage,
      document: medicalDocument,
      conditions: selectedConditions,
      medications: selectedMedications,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      // API 호출 시뮬레이션 (실제로는 백엔드 API 호출)
      const response = await simulateAPICall(userMessage);
      
      const botMessage = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: response.answer,
        confidence: response.confidence_score,
        warnings: response.safety_warnings,
        interactions: response.drug_interactions,
        references: response.references,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, botMessage]);
    } catch (error) {
      const errorMessage = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: '죄송합니다. 응답을 생성하는 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.',
        isError: true,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const simulateAPICall = async (message) => {
    // 실제 API 호출 시뮬레이션
    await new Promise(resolve => setTimeout(resolve, 2000));

    // 시뮬레이션된 응답
    const responses = {
      '당뇨': {
        answer: '당뇨병은 혈당이 정상보다 높은 상태가 지속되는 만성 질환입니다. 메트포르민은 제2형 당뇨병 치료의 1차 선택약으로, 간에서 포도당 생성을 억제하고 인슐린 감수성을 개선합니다.\n\n📋 주요 관리 사항:\n• 규칙적인 혈당 측정\n• 균형 잡힌 식단 유지\n• 규칙적인 운동\n• 정기적인 의료진 상담\n\n⚠️ 주의: 개인의 상태에 따라 치료법이 다를 수 있으므로 반드시 담당 의사와 상담하세요.',
        confidence_score: 0.92,
        safety_warnings: [],
        drug_interactions: message.medications.includes('아스피린') ? [{
          drugs: ['메트포르민', '아스피린'],
          severity: 'minor',
          effect: '저혈당 위험 약간 증가',
          recommendation: '혈당 모니터링 강화'
        }] : [],
        references: ['대한당뇨병학회 진료지침', '식품의약품안전처 의약품 정보']
      },
      '고혈압': {
        answer: '고혈압은 혈압이 지속적으로 140/90mmHg 이상인 상태를 말합니다. 암로디핀은 칼슘채널차단제로 혈관을 이완시켜 혈압을 낮춥니다.\n\n💊 복용 시 주의사항:\n• 매일 같은 시간에 복용\n• 갑자기 중단하지 말 것\n• 어지러움이 있을 수 있으므로 천천히 일어나기\n\n🥗 생활습관 개선:\n• 저염식 실천 (하루 5g 이하)\n• 규칙적인 운동 (주 150분 이상)\n• 금연 및 절주\n\n정기적인 혈압 측정과 의료진 상담이 중요합니다.',
        confidence_score: 0.89,
        safety_warnings: ['자몽주스와 함께 복용 시 약물 농도 상승 가능'],
        drug_interactions: [],
        references: ['대한고혈압학회 진료지침 2022']
      }
    };

    // 키워드 기반 응답 선택
    if (message.content.includes('당뇨') || message.medications.includes('메트포르민')) {
      return responses['당뇨'];
    } else if (message.content.includes('혈압') || message.medications.includes('암로디핀')) {
      return responses['고혈압'];
    }

    // 기본 응답
    return {
      answer: '입력하신 내용을 바탕으로 설명드리겠습니다. 구체적인 의료 조언은 담당 의사와 상담하시기 바랍니다.',
      confidence_score: 0.75,
      safety_warnings: ['이 정보는 일반적인 의료 정보이며, 개인의 특수한 상황을 고려하지 않았습니다.'],
      drug_interactions: [],
      references: []
    };
  };

  const handleFeedback = async (messageId, rating) => {
    setShowFeedback(prev => ({ ...prev, [messageId]: true }));
    
    // 피드백 API 호출 시뮬레이션
    console.log(`Feedback for message ${messageId}: ${rating}`);
    
    // 2초 후 피드백 UI 숨기기
    setTimeout(() => {
      setShowFeedback(prev => ({ ...prev, [messageId]: false }));
    }, 2000);
  };

  const toggleCondition = (condition) => {
    setSelectedConditions(prev =>
      prev.includes(condition)
        ? prev.filter(c => c !== condition)
        : [...prev, condition]
    );
  };

  const toggleMedication = (medication) => {
    setSelectedMedications(prev =>
      prev.includes(medication)
        ? prev.filter(m => m !== medication)
        : [...prev, medication]
    );
  };

  return (
    <div className="flex flex-col h-screen bg-gray-50">
      {/* 헤더 */}
      <div className="bg-white border-b border-gray-200 p-4">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-2xl font-bold text-gray-800 flex items-center gap-2">
            <Heart className="text-red-500" />
            의료 정보 도우미
          </h1>
          <p className="text-sm text-gray-600 mt-1">
            의료 문서를 쉽게 이해할 수 있도록 도와드립니다
          </p>
        </div>
      </div>

      {/* 메인 컨텐츠 */}
      <div className="flex-1 overflow-hidden">
        <div className="max-w-4xl mx-auto h-full flex flex-col">
          {/* 메시지 영역 */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div className={`max-w-2xl ${message.type === 'user' ? 'order-2' : ''}`}>
                  <div className={`rounded-lg p-4 ${
                    message.type === 'user'
                      ? 'bg-blue-500 text-white'
                      : message.isError
                      ? 'bg-red-100 text-red-800'
                      : 'bg-white border border-gray-200'
                  }`}>
                    {/* 사용자 메시지 */}
                    {message.type === 'user' && (
                      <>
                        <p className="whitespace-pre-wrap">{message.content}</p>
                        {message.conditions.length > 0 && (
                          <div className="mt-2 text-sm opacity-90">
                            기저질환: {message.conditions.join(', ')}
                          </div>
                        )}
                        {message.medications.length > 0 && (
                          <div className="text-sm opacity-90">
                            복용약물: {message.medications.join(', ')}
                          </div>
                        )}
                      </>
                    )}

                    {/* 봇 메시지 */}
                    {message.type === 'bot' && !message.isError && (
                      <>
                        <div className="prose prose-sm max-w-none">
                          <p className="whitespace-pre-wrap text-gray-800">{message.content}</p>
                        </div>

                        {/* 약물 상호작용 경고 */}
                        {message.interactions?.length > 0 && (
                          <div className="mt-4 p-3 bg-yellow-50 rounded-lg border border-yellow-200">
                            <div className="flex items-center gap-2 text-yellow-800 font-medium mb-2">
                              <AlertCircle size={18} />
                              약물 상호작용 주의
                            </div>
                            {message.interactions.map((interaction, idx) => (
                              <div key={idx} className="text-sm text-yellow-700 mb-1">
                                <strong>{interaction.drugs.join(' + ')}:</strong> {interaction.effect}
                                <div className="text-xs mt-1">{interaction.recommendation}</div>
                              </div>
                            ))}
                          </div>
                        )}

                        {/* 안전 경고 */}
                        {message.warnings?.length > 0 && (
                          <div className="mt-3 text-sm text-orange-700 bg-orange-50 p-2 rounded">
                            {message.warnings.map((warning, idx) => (
                              <div key={idx} className="flex items-start gap-1">
                                <AlertCircle size={14} className="mt-0.5 flex-shrink-0" />
                                <span>{warning}</span>
                              </div>
                            ))}
                          </div>
                        )}

                        {/* 신뢰도 및 참고자료 */}
                        <div className="mt-3 pt-3 border-t border-gray-200 text-xs text-gray-500">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2">
                              <Activity size={14} />
                              신뢰도: {(message.confidence * 100).toFixed(0)}%
                            </div>
                            <div className="flex gap-2">
                              <button
                                onClick={() => handleFeedback(message.id, 'up')}
                                className="p-1 hover:bg-gray-100 rounded"
                              >
                                <ThumbsUp size={14} />
                              </button>
                              <button
                                onClick={() => handleFeedback(message.id, 'down')}
                                className="p-1 hover:bg-gray-100 rounded"
                              >
                                <ThumbsDown size={14} />
                              </button>
                            </div>
                          </div>
                          {showFeedback[message.id] && (
                            <div className="mt-2 text-green-600">
                              피드백 감사합니다! 서비스 개선에 활용하겠습니다.
                            </div>
                          )}
                        </div>
                      </>
                    )}

                    {/* 에러 메시지 */}
                    {message.isError && (
                      <p>{message.content}</p>
                    )}
                  </div>
                  
                  {/* 타임스탬프 */}
                  <div className={`text-xs text-gray-500 mt-1 ${
                    message.type === 'user' ? 'text-right' : 'text-left'
                  }`}>
                    {message.timestamp.toLocaleTimeString()}
                  </div>
                </div>
              </div>
            ))}
            
            {/* 로딩 인디케이터 */}
            {isLoading && (
              <div className="flex justify-start">
                <div className="bg-white border border-gray-200 rounded-lg p-4">
                  <div className="flex items-center gap-2">
                    <div className="animate-pulse flex gap-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0ms'}}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '150ms'}}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '300ms'}}></div>
                    </div>
                    <span className="text-sm text-gray-600">답변 생성 중...</span>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>

          {/* 입력 영역 */}
          <div className="border-t border-gray-200 bg-white p-4">
            {/* 의료 정보 선택 */}
            <div className="mb-4 space-y-3">
              {/* 기저질환 선택 */}
              <div>
                <label className="text-sm font-medium text-gray-700 flex items-center gap-2 mb-2">
                  <User size={16} />
                  기저질환 (해당하는 항목을 선택하세요)
                </label>
                <div className="flex flex-wrap gap-2">
                  {commonConditions.map(condition => (
                    <button
                      key={condition}
                      onClick={() => toggleCondition(condition)}
                      className={`px-3 py-1 rounded-full text-sm transition-colors ${
                        selectedConditions.includes(condition)
                          ? 'bg-blue-500 text-white'
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                      }`}
                    >
                      {condition}
                    </button>
                  ))}
                </div>
              </div>

              {/* 복용 약물 선택 */}
              <div>
                <label className="text-sm font-medium text-gray-700 flex items-center gap-2 mb-2">
                  <Pill size={16} />
                  복용 중인 약물 (해당하는 항목을 선택하세요)
                </label>
                <div className="flex flex-wrap gap-2">
                  {commonMedications.map(medication => (
                    <button
                      key={medication}
                      onClick={() => toggleMedication(medication)}
                      className={`px-3 py-1 rounded-full text-sm transition-colors ${
                        selectedMedications.includes(medication)
                          ? 'bg-green-500 text-white'
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                      }`}
                    >
                      {medication}
                    </button>
                  ))}
                </div>
              </div>

              {/* 의료 문서 입력 토글 */}
              <button
                onClick={() => setShowDocumentInput(!showDocumentInput)}
                className="text-sm text-blue-600 hover:text-blue-700 flex items-center gap-1"
              >
                <FileText size={16} />
                의료 문서 입력하기
                <ChevronDown size={16} className={`transform transition-transform ${showDocumentInput ? 'rotate-180' : ''}`} />
              </button>

              {/* 의료 문서 입력 영역 */}
              {showDocumentInput && (
                <div>
                  <textarea
                    value={medicalDocument}
                    onChange={(e) => setMedicalDocument(e.target.value)}
                    placeholder="의사 소견서나 처방전 내용을 입력하세요..."
                    className="w-full p-3 border border-gray-300 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500"
                    rows="4"
                  />
                </div>
              )}
            </div>

            {/* 메시지 입력 */}
            <div className="flex gap-2">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSendMessage()}
                placeholder="궁금한 점을 물어보세요..."
                className="flex-1 p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                disabled={isLoading}
              />
              <button
                onClick={handleSendMessage}
                disabled={isLoading || (!inputMessage.trim() && !medicalDocument.trim())}
                className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors flex items-center gap-2"
              >
                <Send size={18} />
                전송
              </button>
            </div>

            {/* 면책 조항 */}
            <p className="text-xs text-gray-500 mt-2 text-center">
              이 서비스는 의료 정보 이해를 돕기 위한 것으로, 의사의 진료를 대체할 수 없습니다.
              정확한 진단과 치료는 반드시 의료진과 상담하세요.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MedicalChatbot;