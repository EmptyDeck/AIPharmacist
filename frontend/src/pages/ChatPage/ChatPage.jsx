// ChatPage.jsx
import React, { useState, useEffect, useRef } from "react";
import { Link } from "react-router-dom";
import * as S from "./ChatPage.style";
import { Send, FileUp, Mail, Mic } from "lucide-react";
import { postChat, getHealth, getLogin, getCallback } from "../../apis/apis";
const commonConditions = [
  "ÎãπÎá®Î≥ë",
  "Í≥†ÌòàÏïï",
  "Ïã¨Ïû•ÏßàÌôò",
  "Ï≤úÏãù",
  "Í¥ÄÏ†àÏóº",
  "Í∞ëÏÉÅÏÑ†ÏßàÌôò",
  "Í≥†ÏßÄÌòàÏ¶ù",
  "Ïö∞Ïö∏Ï¶ù",
  "Î∂àÏïàÏû•Ïï†",
  "ÎßåÏÑ±ÌèêÏáÑÏÑ±ÌèêÏßàÌôò",
];

const commonMedications = [
  "ÏïÑÏä§ÌîºÎ¶∞",
  "ÌÉÄÏù¥Î†àÎÜÄ",
  "Î∂ÄÎ£®Ìéú",
  "Î©îÌä∏Ìè¨Î•¥ÎØº",
  "ÏïîÎ°úÎîîÌïÄ",
  "ÏïÑÌÜ†Î•¥Î∞îÏä§ÌÉÄÌã¥",
  "Ïò§Î©îÌîÑÎùºÏ°∏",
  "Î†àÎ≥¥Ìã∞Î°ùÏã†",
  "Î¶¨ÏãúÎÖ∏ÌîÑÎ¶¥",
  "Î©îÌä∏ÌîÑÎ°§Î°§",
];

export default function ChatPage() {
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState("");
  const [medicalDocument, setMedicalDocument] = useState("");
  const [selectedConditions, setSelectedConditions] = useState([]);
  const [selectedMedications, setSelectedMedications] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [showDocumentInput, setShowDocumentInput] = useState(false);
  const [showFeedback, setShowFeedback] = useState({});
  const messagesEndRef = useRef(null);
  const fileInputRef = useRef(null);
  const [uploadedFileName, setUploadedFileName] = useState("");
  const [selectedFile, setSelectedFile] = useState(null);

  useEffect(() => {
    setMessages([
      {
        id: "welcome",
        type: "bot",
        content:
          "ÏïàÎÖïÌïòÏÑ∏Ïöî! Dr. WatsonÏûÖÎãàÎã§. üòä\n\nÏùòÏÇ¨ ÏÜåÍ≤¨ÏÑúÎÇò Ï≤òÎ∞©Ï†ÑÏóê ÎåÄÌï¥ Í∂ÅÍ∏àÌïú Ï†êÏù¥ ÏûàÏúºÏãúÎ©¥ Ìé∏ÌïòÍ≤å Î¨ºÏñ¥Î≥¥ÏÑ∏Ïöî.",
        timestamp: new Date(),
      },
    ]);
  }, []);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputMessage.trim() && !medicalDocument.trim() && !selectedFile)
      return;
    const contentToSend =
      inputMessage.trim() ||
      medicalDocument.trim() ||
      (selectedFile ? uploadedFileName : "");

    const userMessage = {
      id: Date.now().toString(),
      type: "user",
      content: contentToSend,
      document: medicalDocument,
      conditions: selectedConditions,
      medications: selectedMedications,
      file: selectedFile,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputMessage("");
    setIsLoading(true);

    try {
      console.log("Î≥¥ÎÇº Î©îÏãúÏßÄ:", userMessage);
      const response = await postChat(userMessage);
      const botMessage = {
        id: (Date.now() + 1).toString(),
        type: "bot",
        content: response.answer,
        confidence: response.model_metadata?.confidence,
        warnings: [],
        interactions: [],
        references: [],
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, botMessage]);
    } catch {
      setMessages((prev) => [
        ...prev,
        {
          id: (Date.now() + 1).toString(),
          type: "bot",
          content: "Ï£ÑÏÜ°Ìï©ÎãàÎã§. Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.",
          isError: true,
          timestamp: new Date(),
        },
      ]);
    } finally {
      setIsLoading(false);
      setSelectedFile(null);
      setUploadedFileName("");
    }
  };

  /*const simulateAPICall = async (message) => {
    await new Promise((r) => setTimeout(r, 1000));
    if (
      message.content.includes("ÎãπÎá®") ||
      message.medications.includes("Î©îÌä∏Ìè¨Î•¥ÎØº")
    ) {
      return {
        answer: "ÎãπÎá®Î≥ë Í¥ÄÎ†® Ï†ïÎ≥¥ÏûÖÎãàÎã§.",
        confidence_score: 0.95,
        safety_warnings: [],
        drug_interactions: [],
        references: [],
      };
    }
    return {
      answer: "Ìï¥Îãπ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.",
      confidence_score: 0.6,
      safety_warnings: ["Í∞úÏù∏Ï∞®Í∞Ä ÏûàÏúºÎØÄÎ°ú Ï†ÑÎ¨∏Í∞Ä ÏÉÅÎã¥ ÌïÑÏöî"],
      drug_interactions: [],
      references: [],
    };
  };*/

  const toggleCondition = (condition) => {
    setSelectedConditions((prev) =>
      prev.includes(condition)
        ? prev.filter((c) => c !== condition)
        : [...prev, condition]
    );
  };

  const toggleMedication = (medication) => {
    setSelectedMedications((prev) =>
      prev.includes(medication)
        ? prev.filter((m) => m !== medication)
        : [...prev, medication]
    );
  };
  const handleFileButtonClick = () => {
    fileInputRef.current.click();
  };

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      setUploadedFileName(file.name);
      setSelectedFile(file);
    }
  };

  return (
    <S.PageWrapper>
      <S.Header>
        Dr. Watson
        <Link to={`/mail`}>
          <div title="ÎåÄÌôî ÎÇ¥Ïö© Î©îÏùºÎ°ú Ï†ÑÏÜ°">
            <Mail style={{ cursor: "pointer" }} />
          </div>
        </Link>
      </S.Header>

      <S.ChatContainer>
        <S.MessageList>
          {messages.map((message) => (
            <S.MessageBubble key={message.id} $isUser={message.type === "user"}>
              <S.MessageContent $isUser={message.type === "user"}>
                {message.content}
              </S.MessageContent>
              <S.Timestamp $isUser={message.type === "user"}>
                {message.timestamp.toLocaleTimeString()}
              </S.Timestamp>
            </S.MessageBubble>
          ))}
          {isLoading && <S.Loading>ÎãµÎ≥Ä ÏÉùÏÑ± Ï§ë...</S.Loading>}
          <div ref={messagesEndRef} />
        </S.MessageList>

        <S.InputArea>
          <S.SelectContainer>
            <label>Í∏∞Ï†ÄÏßàÌôò ÏÑ†ÌÉù</label>
            <div>
              {commonConditions.map((c) => (
                <S.SelectButton
                  key={c}
                  selected={selectedConditions.includes(c)}
                  onClick={() => toggleCondition(c)}
                >
                  {c}
                </S.SelectButton>
              ))}
            </div>
          </S.SelectContainer>

          <S.SelectContainer>
            <label>Î≥µÏö©ÏïΩÎ¨º ÏÑ†ÌÉù</label>
            <div>
              {commonMedications.map((m) => (
                <S.SelectButton
                  key={m}
                  selected={selectedMedications.includes(m)}
                  onClick={() => toggleMedication(m)}
                >
                  {m}
                </S.SelectButton>
              ))}
            </div>
          </S.SelectContainer>
          {uploadedFileName && <S.FileUpload> {uploadedFileName}</S.FileUpload>}
          {showDocumentInput && (
            <S.TextArea
              placeholder="ÏùòÎ£å Î¨∏ÏÑúÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
              value={medicalDocument}
              onChange={(e) => setMedicalDocument(e.target.value)}
            />
          )}

          <S.MessageInputContainer>
            <S.SendButton>
              <FileUp size={18} onClick={handleFileButtonClick} />
            </S.SendButton>
            <input
              type="file"
              ref={fileInputRef}
              style={{ display: "none" }}
              onChange={handleFileChange}
            />
            <S.InputWrapper>
              <S.Input
                placeholder="ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
                disabled={isLoading}
              />
              <div title="ÏùåÏÑ± ÏûÖÎ†•">
                <Mic style={{ cursor: "pointer" }} />
              </div>
            </S.InputWrapper>
            <S.SendButton onClick={handleSendMessage} disabled={isLoading}>
              <Send size={18} />
              Ï†ÑÏÜ°
            </S.SendButton>
          </S.MessageInputContainer>
        </S.InputArea>
      </S.ChatContainer>
    </S.PageWrapper>
  );
}
